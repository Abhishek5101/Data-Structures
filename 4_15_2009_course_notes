## Start of class (no learning outcomes)

### Housekeeping items
- Update tracker
- Showed leaderboard - students who have completed most Challenges
- Technical Articles : write a draft by next Wed 4/24. 5 min read on medium.
    - Start your technical article - anything we've covered in this class - or you can go into something deeper.  [NOTE: Is there a rubric / technical article spec?  / ? will link to repo ]
    - draft - topic and outine
    - needs diagrams (can be borrowed) - *good job mentioning attribution and no tolerance of plagiarism*
- Added code review tracking to progress tracker - everyone should do at least one live code review before end of course.
- Asked for volunteers for the two code reviews today  : looked over their code before approving


### Everyone grab a whiteboard
- On Whiteboard
    - Linked List containing: "I", "Love", "Cats" (in that order)
    - Draw a diagram of the list above.
    - Alan - important for interviews to have diagrams

### Code review
- Egon showing code, Alan at whiteboard, all students with individual whiteboards
- As the student (Egon) talks through their code, run it on your diagram (each student has their own diagram that they drew on the whiteboard)
- [Aside] What does the method 'insert_at_index(index, value) - value goes at index, items shift down
- [Aside] Alan instructing Egon how to walk through his code. Exploring range function - had class tyoe 'range(3)' showed range(1) = [0], range(3)=[0,1,2]
- Note: Alan did most of the talking here and was drawing it on the big whiteboard- told students to "do this along with" - students didn't need to think here - they just copied the big whiteboard.  Suggestion - have them work in pairs and Alan only support pairs with questions.
[2:10]
- hint on whiteboard - switch colors of markers between setup and implementation.

- Alan: write a test case to find bugs. Don't rewrite code without showing the bug.
- Feedback on Egon's Code
 - Like: DRY,
 - Change: replace last elif with else


- When to use a for loop or while loop (asked class): while has condition, for loop uses an index (counter controlled)  [NOTE: Why are we discussing for and while loops in CS 1.3? ]
- what is complexity? There is a space to fill this in in the docstring for the code template.
[2:20]


### replace
- [2:23] Run your personal code on your whiteboard diagram
- Student (Nicolai) Walk through your code - went through all.
    - discussion : difference between break and return.
    - using return means the ValueError doesn't run if found.
- Nicolai go step by step as Alan shows on whiteboard and adds in comments
 - Alan what part of this code 'node=node.next' what is evaluated first?  (called on a student - they didn't get it) - need to evaluate the right hand side first before assignment.
- Feedback on Code
 - Like: Can optimize by checking head or tail first

- more discussion
    - should I use 'return self' - no because replace doesn't expect a return value.

[2:41] - break
[2:49] - laptops closed - lecture portion of the class
-[Alan On Whiteboard ] Concrete Data Structures
- in CS 1 you learned about Arrays - what are the two types? List is an ordered sequence of items you can store items in, add, remove, replace,
- Abstract Data Structures: List (both arrays and LinkedLists are Concrete examples of the List ADT)
(Whiteboard (Left is ADT | Concrete Data Type))
ADT is like the API | Concrete is like backend - implementation details hidden from ADT (frontend)
- An ADT is like an interface in Java, a protocol in Swift.
- Types of arrays : dynamic, static
- Types of linkedlists: doubly linked, single linked

[Moved to slides [3:04]]
- Today we will talk about two new ADT's Stack And Queue

How does this relate to
-function stack? Function calls go on the stack, popped when the function returns.
-Stack overflow
- Stack trace is the call stack being displayed to yoru terminal.

-can't access items on the bottom of the stack.

Stack and Queue are a lot like Lists but with extra rules.  These rules make Stacks and Queues more useful data structures because the rules can drive how and why we use them. ie : they impose fairness.

Optional methods of stacks and queues:
-isEmpty
- isFull
-size

-Priority Queue - covered in CS 2.1

[3:17] Back to repo - showed topics, challenges, resources.
- required reading (from yesterday) Linked Lists
- required reading (for next class)  Stack & Queues - read and look at diagrams before next week.
- play with the diagram maker VISU [ Note: this is cool - maybe have them play with it in the class instead of so much ta]
